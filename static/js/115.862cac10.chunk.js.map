{"version":3,"file":"static/js/115.862cac10.chunk.js","mappings":"iOAkEA,UA7De,WACb,OAAuBA,EAAAA,EAAAA,IAAgB,IAAhCC,GAAP,eACA,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAQN,EAAaO,IAAI,SAoB/B,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,GAASA,EAAMG,OAAS,EAAG,CAC7B,IAAMC,EAAS,mCAAG,2FAChBP,GAAa,GADG,mBAISQ,EAAAA,EAAAA,IAAaL,EAAO,GAJ7B,cAIRM,EAJQ,yBAKPA,GALO,gCAOdC,QAAQC,MAAR,MAPc,yBASdX,GAAa,GATC,4EAAH,qDAafO,IAAYK,MAAK,SAAAC,GAAM,OAAIX,EAAUW,EAAOC,QAArB,GACxB,CACF,GAAE,CAACX,KAGF,iCACE,0BACE,kBAAMY,UAAU,aAAhB,WACE,kBACEA,UAAU,oBACVC,KAAK,OACLC,KAAK,QACLC,aAAa,SAEf,mBAAQH,UAAU,qBAAqBC,KAAK,SAA5C,0BAKJ,gBAAKD,UAAU,cAAf,UACE,0BACGhB,IAAa,SAAC,IAAD,KACZA,GACAE,GACAA,EAAOkB,KAAI,SAAAC,GAAK,OACd,eAAIL,UAAU,QAAd,UACE,SAAC,KAAD,CACEM,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,KAAK,iBAAD,OAAmBrB,IAFlC,SAIGiB,EAAMK,SALgBL,EAAME,GADnB,WAc3B,C,+LC9DKI,EAAU,mCACVC,EAAM,+B,SAGGC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCC,GAAnC,8EACQC,EADR,UACiBH,EADjB,uCACmDD,EADnD,iBACmEG,GADnE,SAGeE,EAAWD,GAH1B,mHAMetB,EAAa,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BwB,EAAYH,GAAxC,gFACQ1B,EAAQ8B,mBAAmBD,GAE3BF,EAHR,UAGiBH,EAHjB,iCAG6CD,EAH7C,iBAG6DG,EAH7D,kBAG2E1B,GAH3E,SAKe4B,EAAWD,GAL1B,mHAQeI,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4BC,GAA5B,8EACQL,EADR,UACiBH,EADjB,kBAC8BQ,EAD9B,oBACiDT,GADjD,SAGeK,EAAWD,GAH1B,mHAmBeM,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBD,GAAvB,8EACQL,EADR,UACiBH,EADjB,kBAC8BQ,EAD9B,4BACyDT,GADzD,SAGeK,EAAWD,GAH1B,mHAMeO,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA0BF,GAA1B,8EACQL,EADR,UACiBH,EADjB,kBAC8BQ,EAD9B,4BACyDT,GADzD,SAGeK,EAAWD,GAH1B,mHAYeC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BD,GAA1B,gGAE2BQ,EAAAA,EAAAA,IAAUR,GAFrC,cAEUrB,EAFV,yBAGWA,EAAS8B,MAHpB,gCAKI7B,QAAQC,MAAR,MALJ,gF","sources":["components/Movies/Movies.jsx","movieDbAPI/movieDbAPI.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { searchMovies } from 'movieDbAPI/movieDbAPI';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchParams] = useSearchParams('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  const query = searchParams.get('query');\n  useEffect(() => {\n    if (query && query.length > 0) {\n      const getMovies = async () => {\n        setIsLoading(true);\n\n        try {\n          const response = await searchMovies(query, 1);\n          return response;\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n      getMovies().then(result => setMovies(result.results));\n    }\n  }, [query]);\n\n  return (\n    <>\n      <div>\n        <form className=\"form-block\">\n          <input\n            className=\"form-block__input\"\n            type=\"text\"\n            name=\"query\"\n            autoComplete=\"off\"\n          />\n          <button className=\"form-block__submit\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n      <div className='movies-list'>\n        <ul>\n          {isLoading && <Loader />}\n          {!isLoading &&\n            movies &&\n            movies.map(movie => (\n              <li className='movie' key={movie.id}>\n                <Link\n                  to={`${movie.id}`}\n                  state={{ from: `/movies?query=${query}` }}\n                >\n                  {movie.title}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'bc23d88e8c379b88dcc9e69c75bc8f78';\nconst URI = 'https://api.themoviedb.org/3';\n// const MOVIE_GENRES = 'movie-genres';\n\nasync function fetchTrandingMovies(page) {\n  const url = `${URI}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n\n  return await getRequest(url);\n}\n\nasync function searchMovies(searchText, page) {\n  const query = encodeURIComponent(searchText);\n\n  const url = `${URI}/search/movie?api_key=${API_KEY}&page=${page}&query=${query}`;\n\n  return await getRequest(url);\n}\n\nasync function getMovieById(movieId) {\n  const url = `${URI}/movie/${movieId}?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getGenres() {\n//   const url = `${URI}/genre/movie/list?api_key=${API_KEY}`;\n\n//   let genres = localStorage.getItem(MOVIE_GENRES);\n//   if (genres) {\n//     return JSON.parse(genres);\n//   } else {\n//     genres = await getRequest(url);\n//     localStorage.setItem(MOVIE_GENRES, JSON.stringify(genres.genres));\n//     return genres.genres;\n//   }\n// }\n\nasync function getCast(movieId) {\n  const url = `${URI}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\nasync function getReviews(movieId) {\n  const url = `${URI}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getMovieVideo(movieId) {\n//   const url = `${URI}/movie/${movieId}/videos?api_key=${API_KEY}`;\n\n//   return await getRequest(url);\n// }\n\nasync function getRequest(url) {\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport {\n  fetchTrandingMovies,\n  searchMovies,\n  getMovieById,\n  // getGenres,\n  // getMovieVideo,\n  getCast,\n  getReviews,\n};\n"],"names":["useSearchParams","searchParams","useState","isLoading","setIsLoading","movies","setMovies","query","get","useEffect","length","getMovies","searchMovies","response","console","error","then","result","results","className","type","name","autoComplete","map","movie","to","id","state","from","title","API_KEY","URI","fetchTrandingMovies","page","url","getRequest","searchText","encodeURIComponent","getMovieById","movieId","getCast","getReviews","axios","data"],"sourceRoot":""}