{"version":3,"file":"static/js/460.c897650f.chunk.js","mappings":"2OA8DA,UAxDa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,2FACfJ,GAAa,GADE,mBAIUK,EAAAA,EAAAA,IAAQJ,GAJlB,cAIPK,EAJO,yBAKNA,GALM,gCAObC,QAAQC,MAAR,MAPa,yBASbR,GAAa,GATA,4EAAH,qDAadI,IAAWK,MAAK,SAAAC,GAAM,OAAIZ,EAAQY,EAAOb,KAAnB,GACvB,GAAE,CAACI,KAGF,iCACE,mBACA,6BACGF,GACC,SAAC,IAAD,IACkB,IAAhBF,EAAKc,QACP,gEAEA,eAAIC,UAAU,OAAd,SACGf,EAAKgB,KAAI,SAAAC,GAAM,OACd,gBAAIF,UAAU,aAAd,WACE,gBACEA,UAAU,YACVG,IACED,EAAOE,aAAP,0CACuCF,EAAOE,cAC1CC,EAENC,IAAKJ,EAAOK,QAGd,cAAGP,UAAU,YAAb,SAA0BE,EAAOK,QACjC,eAAGP,UAAU,YAAb,wBAAqCE,EAAOM,eAZdN,EAAOO,GADzB,UAqB3B,C,+LC1DKC,EAAU,mCACVC,EAAM,+B,SAGGC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCC,GAAnC,8EACQC,EADR,UACiBH,EADjB,uCACmDD,EADnD,iBACmEG,GADnE,SAGeE,EAAWD,GAH1B,mHAMeE,EAAa,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,EAAYJ,GAAxC,gFACQK,EAAQC,mBAAmBF,GAE3BH,EAHR,UAGiBH,EAHjB,iCAG6CD,EAH7C,iBAG6DG,EAH7D,kBAG2EK,GAH3E,SAKeH,EAAWD,GAL1B,mHAQeM,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4B/B,GAA5B,8EACQyB,EADR,UACiBH,EADjB,kBAC8BtB,EAD9B,oBACiDqB,GADjD,SAGeK,EAAWD,GAH1B,mHAmBerB,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBJ,GAAvB,8EACQyB,EADR,UACiBH,EADjB,kBAC8BtB,EAD9B,4BACyDqB,GADzD,SAGeK,EAAWD,GAH1B,mHAMeO,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA0BhC,GAA1B,8EACQyB,EADR,UACiBH,EADjB,kBAC8BtB,EAD9B,4BACyDqB,GADzD,SAGeK,EAAWD,GAH1B,mHAYeC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BD,GAA1B,gGAE2BQ,EAAAA,EAAAA,IAAUR,GAFrC,cAEUpB,EAFV,yBAGWA,EAAS6B,MAHpB,gCAKI5B,QAAQC,MAAR,MALJ,gF","sources":["components/MovieDetails/Cast/Cast.jsx","movieDbAPI/movieDbAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'movieDbAPI/movieDbAPI';\nimport Loader from 'components/Loader/Loader';\nimport defaultProfileImage from '../../../images/defaultProfile.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const loadCast = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await getCast(movieId);\n        return response;\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadCast().then(result => setCast(result.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      <hr />\n      <section>\n        {isLoading ? (\n          <Loader />\n        ) : cast.length === 0 ? (\n          <p>There is no cast for this movie yet</p>\n        ) : (\n          <ul className=\"cast\">\n            {cast.map(person => (\n              <li className=\"cast__list\" key={person.id}>\n                <img\n                  className=\"cast__img\"\n                  src={\n                    person.profile_path\n                      ? `https://image.tmdb.org/t/p/w300/${person.profile_path}`\n                      : defaultProfileImage\n                  }\n                  alt={person.name}\n                />\n\n                <p className=\"cast__txt\">{person.name}</p>\n                <p className=\"cast__txt\">Character: {person.character}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'bc23d88e8c379b88dcc9e69c75bc8f78';\nconst URI = 'https://api.themoviedb.org/3';\n// const MOVIE_GENRES = 'movie-genres';\n\nasync function fetchTrandingMovies(page) {\n  const url = `${URI}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n\n  return await getRequest(url);\n}\n\nasync function searchMovies(searchText, page) {\n  const query = encodeURIComponent(searchText);\n\n  const url = `${URI}/search/movie?api_key=${API_KEY}&page=${page}&query=${query}`;\n\n  return await getRequest(url);\n}\n\nasync function getMovieById(movieId) {\n  const url = `${URI}/movie/${movieId}?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getGenres() {\n//   const url = `${URI}/genre/movie/list?api_key=${API_KEY}`;\n\n//   let genres = localStorage.getItem(MOVIE_GENRES);\n//   if (genres) {\n//     return JSON.parse(genres);\n//   } else {\n//     genres = await getRequest(url);\n//     localStorage.setItem(MOVIE_GENRES, JSON.stringify(genres.genres));\n//     return genres.genres;\n//   }\n// }\n\nasync function getCast(movieId) {\n  const url = `${URI}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\nasync function getReviews(movieId) {\n  const url = `${URI}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getMovieVideo(movieId) {\n//   const url = `${URI}/movie/${movieId}/videos?api_key=${API_KEY}`;\n\n//   return await getRequest(url);\n// }\n\nasync function getRequest(url) {\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport {\n  fetchTrandingMovies,\n  searchMovies,\n  getMovieById,\n  // getGenres,\n  // getMovieVideo,\n  getCast,\n  getReviews,\n};\n"],"names":["useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","loadCast","getCast","response","console","error","then","result","length","className","map","person","src","profile_path","defaultProfileImage","alt","name","character","id","API_KEY","URI","fetchTrandingMovies","page","url","getRequest","searchMovies","searchText","query","encodeURIComponent","getMovieById","getReviews","axios","data"],"sourceRoot":""}