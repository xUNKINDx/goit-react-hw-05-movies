{"version":3,"file":"static/js/947.b1b17250.chunk.js","mappings":"0OAkFA,UA7EqB,WACnB,OAAuCA,EAAAA,EAAAA,UAAS,MAAhD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,MAAjD,eAAOK,EAAP,KAAqBC,EAArB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MA2BjB,OAzBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,2FACvBR,GAAa,GADU,mBAIES,EAAAA,EAAAA,IAAaN,GAJf,cAIfO,EAJe,yBAKdA,GALc,gCAOrBC,QAAQC,MAAR,MAPqB,yBASrBZ,GAAa,GATQ,4EAAH,qDAatBQ,IAAmBK,MAAK,SAAAC,GAAM,OAAIhB,EAAegB,EAAnB,GAE/B,GAAE,KAEHP,EAAAA,EAAAA,YAAU,WACY,IAAD,IAAdN,GACHC,EAAe,oBAACG,EAASU,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,IAG3C,GAAE,KAGD,iCACE,0BACE,SAAC,KAAD,CAAMC,GAAIhB,EAAV,uBAEDF,IAAa,SAAC,IAAD,KACZA,GAAaF,IACb,4BACE,qBAASqB,UAAU,UAAnB,WACE,gBACEA,UAAU,eACVC,IAAG,0CAAqCtB,EAAauB,aACrDC,IAAKxB,EAAayB,SAEpB,4BACE,eAAIJ,UAAU,aAAd,SAA4BrB,EAAayB,SACzC,eAAGJ,UAAU,OAAb,yBAAiCrB,EAAa0B,iBAC9C,eAAIL,UAAU,aAAd,uBACA,cAAGA,UAAU,OAAb,SAAqBrB,EAAa2B,YAClC,eAAIN,UAAU,aAAd,qBACA,cAAGA,UAAU,OAAb,SACGrB,EAAa4B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAIzD,mBACA,gCACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMZ,GAAG,OAAT,mBADM,SAGR,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,sBADM,kBAKZ,SAAC,KAAD,SAKT,C,+LC9EKa,EAAU,mCACVC,EAAM,+B,SAGGC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCC,GAAnC,8EACQC,EADR,UACiBH,EADjB,uCACmDD,EADnD,iBACmEG,GADnE,SAGeE,EAAWD,GAH1B,mHAMeE,EAAa,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,EAAYJ,GAAxC,gFACQK,EAAQC,mBAAmBF,GAE3BH,EAHR,UAGiBH,EAHjB,iCAG6CD,EAH7C,iBAG6DG,EAH7D,kBAG2EK,GAH3E,SAKeH,EAAWD,GAL1B,mHAQezB,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4BN,GAA5B,8EACQ+B,EADR,UACiBH,EADjB,kBAC8B5B,EAD9B,oBACiD2B,GADjD,SAGeK,EAAWD,GAH1B,mHAmBeM,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBrC,GAAvB,8EACQ+B,EADR,UACiBH,EADjB,kBAC8B5B,EAD9B,4BACyD2B,GADzD,SAGeK,EAAWD,GAH1B,mHAMeO,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA0BtC,GAA1B,8EACQ+B,EADR,UACiBH,EADjB,kBAC8B5B,EAD9B,4BACyD2B,GADzD,SAGeK,EAAWD,GAH1B,mHAYeC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BD,GAA1B,gGAE2BQ,EAAAA,EAAAA,IAAUR,GAFrC,cAEUxB,EAFV,yBAGWA,EAASiC,MAHpB,gCAKIhC,QAAQC,MAAR,MALJ,gF","sources":["components/MovieDetails/MovieDetails.jsx","movieDbAPI/movieDbAPI.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { getMovieById } from 'movieDbAPI/movieDbAPI';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetail] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backLinkHref, setBackLinkHref] = useState(null);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const loadMovieDetails = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await getMovieById(movieId);\n        return response;\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadMovieDetails().then(result => setMovieDetail(result));\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!backLinkHref) {\n      setBackLinkHref(location.state?.from ?? '/');\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <div>\n        <Link to={backLinkHref}>Go back</Link>\n      </div>\n      {isLoading && <Loader />}\n      {!isLoading && movieDetails && (\n        <div>\n          <section className=\"section\">\n            <img\n              className=\"section__img\"\n              src={`https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`}\n              alt={movieDetails.title}\n            />\n            <div>\n              <h2 className=\"title-info\">{movieDetails.title}</h2>\n              <p className=\"info\">User Score: {movieDetails.vote_average}</p>\n              <h3 className=\"title-info\">Overview</h3>\n              <p className=\"info\">{movieDetails.overview}</p>\n              <h3 className=\"title-info\">Genres</h3>\n              <p className=\"info\">\n                {movieDetails.genres.map(genre => genre.name).join(', ')}\n              </p>\n            </div>\n          </section>\n          <hr />\n          <section>\n            <h3>Additional infromation</h3>\n            <ul>\n              <li key=\"cast\">\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li key=\"Reviews\">\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n          </section>\n          <Outlet />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'bc23d88e8c379b88dcc9e69c75bc8f78';\nconst URI = 'https://api.themoviedb.org/3';\n// const MOVIE_GENRES = 'movie-genres';\n\nasync function fetchTrandingMovies(page) {\n  const url = `${URI}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n\n  return await getRequest(url);\n}\n\nasync function searchMovies(searchText, page) {\n  const query = encodeURIComponent(searchText);\n\n  const url = `${URI}/search/movie?api_key=${API_KEY}&page=${page}&query=${query}`;\n\n  return await getRequest(url);\n}\n\nasync function getMovieById(movieId) {\n  const url = `${URI}/movie/${movieId}?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getGenres() {\n//   const url = `${URI}/genre/movie/list?api_key=${API_KEY}`;\n\n//   let genres = localStorage.getItem(MOVIE_GENRES);\n//   if (genres) {\n//     return JSON.parse(genres);\n//   } else {\n//     genres = await getRequest(url);\n//     localStorage.setItem(MOVIE_GENRES, JSON.stringify(genres.genres));\n//     return genres.genres;\n//   }\n// }\n\nasync function getCast(movieId) {\n  const url = `${URI}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\nasync function getReviews(movieId) {\n  const url = `${URI}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getMovieVideo(movieId) {\n//   const url = `${URI}/movie/${movieId}/videos?api_key=${API_KEY}`;\n\n//   return await getRequest(url);\n// }\n\nasync function getRequest(url) {\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport {\n  fetchTrandingMovies,\n  searchMovies,\n  getMovieById,\n  // getGenres,\n  // getMovieVideo,\n  getCast,\n  getReviews,\n};\n"],"names":["useState","movieDetails","setMovieDetail","isLoading","setIsLoading","backLinkHref","setBackLinkHref","movieId","useParams","location","useLocation","useEffect","loadMovieDetails","getMovieById","response","console","error","then","result","state","from","to","className","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","join","API_KEY","URI","fetchTrandingMovies","page","url","getRequest","searchMovies","searchText","query","encodeURIComponent","getCast","getReviews","axios","data"],"sourceRoot":""}