{"version":3,"file":"static/js/536.cbfae5cf.chunk.js","mappings":"kOAmDA,UA9CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBJ,GAAa,GADK,mBAIOK,EAAAA,EAAAA,IAAWJ,GAJlB,cAIVK,EAJU,yBAKTA,GALS,gCAOhBC,QAAQC,MAAR,MAPgB,yBAShBR,GAAa,GATG,4EAAH,qDAajBI,IAAcK,MAAK,SAAAC,GAAM,OAAIZ,EAAWY,EAAOC,QAAtB,GAC1B,GAAE,CAACV,KAGF,iCACE,mBACA,6BACGF,GACC,SAAC,IAAD,IACqB,IAAnBF,EAAQe,QACV,qEAEA,wBACGf,EAAQgB,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,eAAeC,MAAQF,EAAOG,WAClD,uBAAIH,EAAOI,YAFJJ,EAAOK,GADC,UAW9B,C,+LC/CKC,EAAU,mCACVC,EAAM,+B,SAGGC,EAAoB,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCC,GAAnC,8EACQC,EADR,UACiBH,EADjB,uCACmDD,EADnD,iBACmEG,GADnE,SAGeE,EAAWD,GAH1B,mHAMeE,EAAa,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,EAAYJ,GAAxC,gFACQK,EAAQC,mBAAmBF,GAE3BH,EAHR,UAGiBH,EAHjB,iCAG6CD,EAH7C,iBAG6DG,EAH7D,kBAG2EK,GAH3E,SAKeH,EAAWD,GAL1B,mHAQeM,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4B7B,GAA5B,8EACQuB,EADR,UACiBH,EADjB,kBAC8BpB,EAD9B,oBACiDmB,GADjD,SAGeK,EAAWD,GAH1B,mHAmBeO,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuB9B,GAAvB,8EACQuB,EADR,UACiBH,EADjB,kBAC8BpB,EAD9B,4BACyDmB,GADzD,SAGeK,EAAWD,GAH1B,mHAMenB,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA0BJ,GAA1B,8EACQuB,EADR,UACiBH,EADjB,kBAC8BpB,EAD9B,4BACyDmB,GADzD,SAGeK,EAAWD,GAH1B,mHAYeC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BD,GAA1B,gGAE2BQ,EAAAA,EAAAA,IAAUR,GAFrC,cAEUlB,EAFV,yBAGWA,EAAS2B,MAHpB,gCAKI1B,QAAQC,MAAR,MALJ,gF","sources":["components/MovieDetails/Reviews/Reviews.jsx","movieDbAPI/movieDbAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'movieDbAPI/movieDbAPI';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const loadReviews = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await getReviews(movieId);\n        return response;\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadReviews().then(result => setReviews(result.results));\n  }, [movieId]);\n\n  return (\n    <>\n      <hr />\n      <section>\n        {isLoading ? (\n          <Loader />\n        ) : reviews.length === 0 ? (\n          <p>We don't have any reviews for this movie</p>\n        ) : (\n          <ul>\n            {reviews.map(review => (\n              <li key={review.id}>\n                <h3>Author: {review.author_details.name || review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'bc23d88e8c379b88dcc9e69c75bc8f78';\nconst URI = 'https://api.themoviedb.org/3';\n// const MOVIE_GENRES = 'movie-genres';\n\nasync function fetchTrandingMovies(page) {\n  const url = `${URI}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n\n  return await getRequest(url);\n}\n\nasync function searchMovies(searchText, page) {\n  const query = encodeURIComponent(searchText);\n\n  const url = `${URI}/search/movie?api_key=${API_KEY}&page=${page}&query=${query}`;\n\n  return await getRequest(url);\n}\n\nasync function getMovieById(movieId) {\n  const url = `${URI}/movie/${movieId}?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getGenres() {\n//   const url = `${URI}/genre/movie/list?api_key=${API_KEY}`;\n\n//   let genres = localStorage.getItem(MOVIE_GENRES);\n//   if (genres) {\n//     return JSON.parse(genres);\n//   } else {\n//     genres = await getRequest(url);\n//     localStorage.setItem(MOVIE_GENRES, JSON.stringify(genres.genres));\n//     return genres.genres;\n//   }\n// }\n\nasync function getCast(movieId) {\n  const url = `${URI}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\nasync function getReviews(movieId) {\n  const url = `${URI}/movie/${movieId}/reviews?api_key=${API_KEY}`;\n\n  return await getRequest(url);\n}\n\n// async function getMovieVideo(movieId) {\n//   const url = `${URI}/movie/${movieId}/videos?api_key=${API_KEY}`;\n\n//   return await getRequest(url);\n// }\n\nasync function getRequest(url) {\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport {\n  fetchTrandingMovies,\n  searchMovies,\n  getMovieById,\n  // getGenres,\n  // getMovieVideo,\n  getCast,\n  getReviews,\n};\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","loadReviews","getReviews","response","console","error","then","result","results","length","map","review","author_details","name","author","content","id","API_KEY","URI","fetchTrandingMovies","page","url","getRequest","searchMovies","searchText","query","encodeURIComponent","getMovieById","getCast","axios","data"],"sourceRoot":""}